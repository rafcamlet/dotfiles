snippet #! "#!/usr/bin/env ruby" !i
#!/usr/bin/env ruby
endsnippet

snippet concern "active support concern"
require 'active_support/concern'

module ${0:modula_name}
	extend ActiveSupport::Concern

	included do
	end

	module ClassMethods
	end
end
endsnippet

snippet service "service template"
class ${1:Service}

	def self.build
		new
	end

	def initialize()
	end

	def call
		${0}
	end

	private
	# attr_accessor :value
end
endsnippet

snippet begin "exeption handling"
begin
	${0}
rescue => e
	Rails.logger.error { "#{e.message} #{e.backtrace.join("\n")}" }
end
endsnippet

snippet pry "binding.pry"
binding.pry
endsnippet

snippet method_missing "method_missing"
def method_missing(method_name, *args, &block)
	return super unless @other.respond_to? method_name
	@other.send(method_name, *args, &block)
end
endsnippet

snippet respond_to_missing "respond_to_missing"
def respond_to_missing?(method, include_private = false)
	@other.respond_to?(method) || super
end
endsnippet

snippet benchmark "ruby benchamrk test"
require 'benchmark'

r = 100_000
Benchmark.bmbm do |x|
	x.report('first')  { r.times{ } }
	x.report('second') { r.times{ } }
end
endsnippet


snippet init "def initialize"
def initialize($1)
`!p import re
def ass_attr(str):
  str = str.strip()
  return "  @%s = %s" % (str, str)

if(len(t[1]) * 2 + len(re.findall('\,', t[1])) * 3 > 40):
  arr = list(map(ass_attr, t[1].split(',')))
  snip.rv = arr.pop(0)
  for x in arr:
    snip += x
else:
  snip.rv = '  ' + ", ".join(map(lambda x: '@' + x.strip(), t[1].split(','))) + ' = ' + t[1]

`
end
endsnippet

snippet d "double"
$1: $1$0
endsnippet

global !p
import re
def cname():
  r = re.search(':?(.*)_controller', fn)
  if not r: return
  r = re.sub('(s|es|ies)$', '', r.group(1))
  return r
endglobal

snippet create "rails controller create"
def create
`!p import re
r = cname()
if r:
  snip.rv = "  %s = %s.new(%s_params)" % (r, r.capitalize(), r)
  snip += '  if %s.save' % r
  snip += "    redirect_to :back, notice: 'Sukces'"
  snip += '  else'
  snip += '    render action: :new, locals: { %s: %s}' % (r, r)
  snip += '  end'`
end
endsnippet

snippet update "rails controller update"
def update
`!p
r = cname()
if r:
  snip.rv = '  %s = %s.find(params[:id])' % (r, r.capitalize())
  snip   += '  if %s.update(%s_params)' % (r, r)
  snip   += "    redirect_to :index, notice: 'Success'"
  snip   += "  else"
  snip   += "    render :edit, locals: {%s: %s}" % (r, r)
  snip   += '  end'`
end
endsnippet

snippet respond_to "rails respond_to"
respond_to do |format|
	format.html {}
	format.js {}
end
endsnippet
