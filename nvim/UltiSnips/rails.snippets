snippet def "wrap funciont definition" b
def $1
	${0:${VISUAL}}
end
endsnippet

snippet render "render method" b
render $1, locals: { $2 }
endsnippet

snippet trans "AR transaction" b
ActiveRecord::Base.transaction do
	${0:${VISUAL}}
end
endsnippet

snippet desc "Rspec describe"
describe $1 do
	${0:${VISUAL}}
end
endsnippet

snippet it "Rspec it"
it '$0' do

	expect().to
end
endsnippet

snippet rake "Rake task"
# rake one_use:${1:`!v expand('%:t:r')`}

namespace :one_use do
	desc ''
	task ${1:`!v expand('%:t:r')`}: :environment do |t|
		ActiveRecord::Base.transaction do
			RakeLogger.call(t) do
				author "RC"
				note ""

				${0}
			end
		end
	end
end
endsnippet

snippet .each "each" i
.each {|${1}| $1.$0 }
endsnippet

snippet .map "map" i
.map {|${1}| $1.$0 }
endsnippet

snippet .find "find" i
.find {|${1}| $1.$0 }
endsnippet

snippet class "class"
class ${1:`!v substitute(substitute(substitute(expand('%:r'), '\v^app/[^/]*/', '', ''), '\v/(.)', '::\U\1', 'g'), '\v^.', '\U\0', '')`}
	$0
end
endsnippet

snippet factory "FactoryBot"
FactoryBot.define do
  factory :${1:`!v substitute(expand('%:t:r'), '_factory', '', '')`} do
		$0
  end
end
endsnippet

snippet rescue "rescue"
begin
	${0:${VISUAL}}
rescue => e
end
endsnippet

snippet let "let"
let(:$1) { $0 }
endsnippet
