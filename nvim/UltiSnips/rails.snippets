snippet asdf
${0:`!v luaeval('p("asdf")')`}
endsnippet

snippet def "wrap funciont definition" b
def $1
	${0:${VISUAL}}
end
endsnippet

snippet render "render method" b
render $1, locals: { $2 }
endsnippet

snippet trans "AR transaction" b
ActiveRecord::Base.transaction do
	${0:${VISUAL}}
end
endsnippet

snippet desc "Rspec describe"
describe $1 do
	${0:${VISUAL}}
end
endsnippet

snippet it "Rspec it"
it '$0' do

	expect().to
end
endsnippet

snippet rake "Rake task"
# rake one_use:${1:`!v expand('%:t:r')`}

namespace :one_use do
	desc ''
	task ${1:`!v expand('%:t:r')`}: :environment do |t|
		ActiveRecord::Base.transaction do
			RakeLogger.call(t) do
				author "RC"
				note ""

				${0}
			end
		end
	end
end
endsnippet

snippet .each "each" i
.each {|${1}| $1.$0 }
endsnippet

snippet .map "map" i
.map {|${1}| $1.$0 }
endsnippet

snippet .find "find" i
.find {|${1}| $1.$0 }
endsnippet

snippet class "class"
class ${1:`!v Mixedcase(expand('%:t:r'))`}
	$0
end
endsnippet

snippet factory "FactoryBot"
FactoryBot.define do
  factory :${1:`!v substitute(expand('%:t:r'), '_factory', '', '')`} do
		$0
  end
end
endsnippet

snippet rescue "rescue"
begin
	${0:${VISUAL}}
rescue => e
	binding.pry
end
endsnippet

snippet let "let"
let(:$1) { create :$1$0 }
endsnippet

snippet do "do"
do
	$0
end
endsnippet

snippet rspec "rspec"
require 'rails_helper'
describe ${1:`!v Mixedcase(substitute(expand('%:t:r'), '_spec', '', ''))`} do
  subject { described_class }

	context 'example context' do
		let() {  }

		it 'do something' do
			$0
		end
	end
end
endsnippet

snippet sql "raw sql query"
ActiveRecord::Base.connection.execute("${0:${VISUAL}}")
endsnippet

snippet archive 
module Archive
  class ${1:`!v Mixedcase(expand('%:t:r'))`} < BaseStrategy
    def archive
      @obj.$0.update_all(archived_at: Time.current)
			super
    end

    def unarchive
      @obj..unarchived.update_all(archived_at: nil)
			super
    end
  end
end
endsnippet

snippet cell
module ${1:`!v Mixedcase(expand('%:h:h:t'))`}::Cell
	class ${2:`!v Mixedcase(expand('%:t:r'))`} < Shared::Cell::Base
		alias $0 model
	end
end
endsnippet

snippet m
$1: $1$0
endsnippet
